# This is a sample build configuration for JavaScript.
# Check our guides at https://confluence.atlassian.com/x/14UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: node:10.15.3

pipelines:
  branches:
    master:
      - step:
          name: Lint, Test and Build
          script:
            - mv .npmrc_config .npmrc
            - npm install
            - npm run lint
            - npm run build:dev
          artifacts:
            - dist/**
      - step:
          name: Push to ECR
          image: python:3.7.4-alpine3.10
          services:
            - docker
          caches:
            - pip
          script:
            - pip3 install awscli
            - IMAGE="549643135696.dkr.ecr.ap-northeast-2.amazonaws.com/frontend/report"
            - TAG=$BITBUCKET_BRANCH
            - aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}"
            - aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}"
            - eval $(aws ecr get-login --no-include-email --region ap-northeast-2 | sed 's;https://;;g')
            - docker build -t $IMAGE:$TAG .
            - docker push $IMAGE:$TAG

    dev:
      - step:
          name: Lint, Test and Build
          script:
            - mv .npmrc_config .npmrc
            - npm install
            - npm run lint
            - npm run build:dev
          artifacts:
            - dist/**
      - step:
          name: Push to ECR
          image: python:3.7.4-alpine3.10
          services:
            - docker
          caches:
            - pip
          script:
            - pip3 install awscli
            - IMAGE="549643135696.dkr.ecr.ap-northeast-2.amazonaws.com/frontend/report"
            - TAG=$BITBUCKET_BRANCH
            - aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}"
            - aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}"
            - eval $(aws ecr get-login --no-include-email --region ap-northeast-2 | sed 's;https://;;g')
            - docker build -t $IMAGE:$TAG .
            - docker push $IMAGE:$TAG
      - step:
          name: Lint, Test and Build
          script:
            - mv ./confs/.env.dev .env
            - mv .npmrc_config .npmrc
            - npm install
            - npm run lint
            - npm run build
          artifacts:
            - dist/**
      - step:
          name: Deploy
          script:
            - pipe: atlassian/aws-s3-deploy:0.3.2
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: $S3_BUCKET_NAME_DEV
                ACL: "public-read"
                LOCAL_PATH: "dist"

    staging:
      - step:
          name: Lint, Test and Build
          script:
            - mv ./confs/.env.staging .env.local
            - mv .npmrc_config .npmrc
            - npm install
            - npm run lint
            - npm run build
          artifacts:
            - dist/**
      - step:
          name: Deploy
          script:
            - pipe: atlassian/aws-s3-deploy:0.3.2
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: $S3_BUCKET_NAME_STAGING
                ACL: "public-read"
                LOCAL_PATH: "dist"
      - step:
          name: Invalidate
          script:
            - pipe: atlassian/aws-cloudfront-invalidate:0.1.3
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                DISTRIBUTION_ID: $CF_DISTRIBUTION_ID_STAGING

    prod:
      - step:
          name: Lint, Test and Build
          script:
            - mv ./confs/.env.prod .env.local
            - mv .npmrc_config .npmrc
            - npm install
            - npm run lint
            - npm run build
          artifacts:
            - dist/**
      - step:
          name: Deploy
          trigger: manual
          script:
            - pipe: atlassian/aws-s3-deploy:0.3.2
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: $S3_BUCKET_NAME_PROD
                ACL: "public-read"
                LOCAL_PATH: "dist"
      - step:
          name: Invalidate
          script:
            - pipe: atlassian/aws-cloudfront-invalidate:0.1.3
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                DISTRIBUTION_ID: $CF_DISTRIBUTION_ID_PROD
